
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 17 17:03:11 ART 2020
//----------------------------------------------------

package ar.edu.ub.dc.mtd;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 17 17:03:11 ART 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\007\000\002\004\006\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\004\004\001\002\000\012\005\010\006" +
    "\007\007\012\010\011\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\012\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\001\002\000\004\002\000\001\002\000\004" +
    "\011\030\001\002\000\004\011\017\001\002\000\012\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\001\002\000\012\005\015" +
    "\006\007\007\012\010\011\001\002\000\004\002\uffff\001" +
    "\002\000\012\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001\002" +
    "\000\010\013\022\014\021\015\020\001\002\000\004\012" +
    "\027\001\002\000\004\015\025\001\002\000\004\015\023" +
    "\001\002\000\004\012\024\001\002\000\012\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\001\002\000\004\012\026\001\002" +
    "\000\012\005\ufff9\006\ufff9\007\ufff9\010\ufff9\001\002\000" +
    "\012\005\ufffa\006\ufffa\007\ufffa\010\ufffa\001\002\000\010" +
    "\013\033\014\032\015\031\001\002\000\004\012\040\001" +
    "\002\000\004\015\036\001\002\000\004\015\034\001\002" +
    "\000\004\012\035\001\002\000\012\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\001\002\000\004\012\037\001\002\000\012" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\001\002\000\012\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\002\004\001\001\000\006\003\013\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 static int x = 0;  
			   static int y = 0; 
			   
			   public static void locate_it() {
			       x = 0;
			       y = 0;
			   }
			   			   
			   public static void move_it(int xx, int yy) {
			       x += xx;
			       y += yy;
			   }
			   
			   public static void show_it() {
			   		System.out.println("Finaliza en x:" + x + ", y:" + y);
			   		System.out.println("Fin de jecucion.");
			   }	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEAS ::= LATERAL PAR_A NEG NUM PAR_C 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		  System.out.println("Izquierda: "+n1.intValue());
		  move_it(-n1.intValue(),0); 
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEAS ::= LATERAL PAR_A NUM PAR_C 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          System.out.println("Derecha: "+n1.intValue());
          move_it(n1.intValue(),0); 
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINEAS ::= LATERAL PAR_A POS NUM PAR_C 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          System.out.println("Derecha: "+n1.intValue());
          move_it(n1.intValue(),0); 
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINEAS ::= VERTICAL PAR_A NEG NUM PAR_C 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	 	System.out.println("Baja: "+n1.intValue());
		  move_it(0,-n1.intValue()); 
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINEAS ::= VERTICAL PAR_A NUM PAR_C 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 System.out.println("Sube: "+n1.intValue());
		 move_it(0,n1.intValue());
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINEAS ::= VERTICAL PAR_A POS NUM PAR_C 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 System.out.println("Sube: "+n1.intValue());
		 move_it(0,n1.intValue());
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINEAS ::= CENTRAR 
            {
              Object RESULT =null;
		
		 System.out.println("Se ubica en x:0, y:0");
		 locate_it();
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINEAS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO LINEAS 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= LINEAS 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INICIO CUERPO FIN 
            {
              Object RESULT =null;
		 show_it(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INICIO FIN 
            {
              Object RESULT =null;
		 
	    System.out.println("Programa vacio");
	    show_it(); 
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

